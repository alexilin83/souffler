/* src\js\App.svelte generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_input_value,
	space,
	to_number
} from "../../_snowpack/pkg/svelte/internal.js";

import { onMount } from "../../_snowpack/pkg/svelte.js";

function create_fragment(ctx) {
	let div3;
	let div1;
	let canvas_1;
	let t0;
	let div0;
	let input;
	let t1;
	let div2;
	let mounted;
	let dispose;

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			canvas_1 = element("canvas");
			t0 = space();
			div0 = element("div");
			input = element("input");
			t1 = space();
			div2 = element("div");
			div2.textContent = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Dicta quas laudantium quaerat voluptas, laborum maxime dolore nostrum perferendis quam obcaecati aspernatur doloribus facere tempore dolorum doloremque. Quibusdam est sapiente, temporibus nam veniam hic enim facilis soluta! Nulla laudantium dolores non soluta eveniet! Beatae quidem, quis, in reiciendis id fuga quo esse, iure ullam dolorum ipsum fugit doloremque modi ab? Commodi accusamus totam maxime culpa natus ullam sit dolorum voluptatem ut. Adipisci, voluptates nobis dignissimos eos, nostrum similique non blanditiis alias facilis cumque ducimus neque recusandae reiciendis maxime possimus earum quia obcaecati quidem accusantium et ipsam. Natus sunt totam adipisci placeat iusto voluptate saepe cumque incidunt unde ratione temporibus nobis accusantium, animi labore mollitia modi quaerat harum inventore ullam ab, facilis consectetur, enim commodi! Doloribus nisi modi dolore voluptatibus in recusandae unde dignissimos qui neque dolorem accusamus tempore sint a, placeat nihil ipsum accusantium voluptatem enim quas, incidunt itaque quia adipisci commodi! Totam tempora autem, vitae corrupti enim ad laborum magnam. Doloribus qui, iste nobis facere omnis earum nisi quod. Tempore sequi, alias ipsum pariatur placeat, corporis sint adipisci sunt eveniet explicabo quibusdam. Neque, possimus amet similique mollitia, officia modi distinctio quae, quaerat dolore quo eligendi porro dolores inventore doloremque hic vero. Pariatur veniam ipsum iste dolorem perspiciatis eos ea, vel eaque necessitatibus sunt itaque amet ratione esse saepe perferendis neque dolor odio fugit dolores optio. Libero, reiciendis quia dolor distinctio velit earum! Autem, reprehenderit incidunt harum eius neque accusamus quibusdam, alias quidem excepturi libero saepe voluptatem est nostrum quasi asperiores doloribus in sapiente cumque molestiae? Inventore accusantium amet deserunt veritatis ducimus incidunt beatae tempora quae ipsum repellat voluptatem perspiciatis officia enim earum explicabo necessitatibus, adipisci natus reprehenderit harum nihil! Natus doloribus similique unde possimus quidem voluptate ipsam, expedita qui, nihil vitae cumque non at saepe cum. Nemo iste laudantium nostrum?";
			attr(input, "type", "range");
			attr(input, "min", "0");
			attr(input, "max", "200");
			attr(input, "step", "100");
			attr(div0, "class", "absolute top-0 right-0 p-2");
			attr(div1, "class", "relative w-full h-1/6 flex-initial bg-gray-500 text-white");
			attr(div2, "class", "w-full h-5/6 flex-initial overflow-y-auto p-4 xl:p-8 bg-gray-100 text-5xl xl:text-8xl");
			attr(div3, "class", "container mx-auto h-screen flex flex-wrap");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div1);
			append(div1, canvas_1);
			/*canvas_1_binding*/ ctx[4](canvas_1);
			append(div1, t0);
			append(div1, div0);
			append(div0, input);
			set_input_value(input, /*sensivity*/ ctx[3]);
			/*div1_binding*/ ctx[6](div1);
			append(div3, t1);
			append(div3, div2);
			/*div2_binding*/ ctx[7](div2);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_input_handler*/ ctx[5]),
					listen(input, "input", /*input_change_input_handler*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*sensivity*/ 8) {
				set_input_value(input, /*sensivity*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div3);
			/*canvas_1_binding*/ ctx[4](null);
			/*div1_binding*/ ctx[6](null);
			/*div2_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let audioCtx = new (window.AudioContext || window.webkitAudioContext)();
	let analyser = audioCtx.createAnalyser();
	let source;
	let panel;
	let text;
	let canvas;
	let canvasCtx;
	let WIDTH;
	let HEIGHT;
	let drawVisual;
	let bufferLengthAlt;
	let dataArrayAlt;
	let volume;
	let sensivity = 100;

	onMount(() => {
		canvasCtx = canvas.getContext("2d");
		canvas.setAttribute("width", panel.clientWidth);
		canvas.setAttribute("height", panel.clientHeight);

		navigator.mediaDevices.getUserMedia({ video: false, audio: true }).then(function (stream) {
			source = audioCtx.createMediaStreamSource(stream);
			source.connect(analyser);
			visualize();
		}).catch(function (err) {
			console.error(err);
		});
	});

	function visualize() {
		WIDTH = canvas.width;
		HEIGHT = canvas.height;
		analyser.fftSize = 256;
		analyser.minDecibels = -90;
		analyser.maxDecibels = -10;
		analyser.smoothingTimeConstant = 0.85;
		bufferLengthAlt = analyser.frequencyBinCount;
		dataArrayAlt = new Uint8Array(bufferLengthAlt);
		canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);
		draw();
	}

	function draw() {
		drawVisual = requestAnimationFrame(draw);
		analyser.getByteFrequencyData(dataArrayAlt);
		canvasCtx.fillStyle = "rgb(0, 0, 0)";
		canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);
		let barWidth = WIDTH / bufferLengthAlt * 2.5;
		let barHeight;
		let x = 0;

		for (let i = 0; i < bufferLengthAlt; i++) {
			barHeight = dataArrayAlt[i];
			canvasCtx.fillStyle = `rgb(127, ${barHeight + 100}, 0)`;
			canvasCtx.fillRect(x, HEIGHT - barHeight / 2, barWidth, barHeight / 2);
			x += barWidth + 1;
		}

		volume = Math.max(...dataArrayAlt) / 256;

		if (volume > 0.4) {
			$$invalidate(1, text.scrollTop += 1 + 1 * sensivity / 100, text);
		}
	}

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			canvas = $$value;
			$$invalidate(2, canvas);
		});
	}

	function input_change_input_handler() {
		sensivity = to_number(this.value);
		$$invalidate(3, sensivity);
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			panel = $$value;
			$$invalidate(0, panel);
		});
	}

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			text = $$value;
			$$invalidate(1, text);
		});
	}

	return [
		panel,
		text,
		canvas,
		sensivity,
		canvas_1_binding,
		input_change_input_handler,
		div1_binding,
		div2_binding
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;